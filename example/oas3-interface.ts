/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export type Parameter = ParameterWithSchema | ParameterWithContent;
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export type ParameterWithSchema = ParameterWithSchemaWithExample | ParameterWithSchemaWithExamples;
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export type ParameterWithSchemaWithExample =
  | ParameterWithSchemaWithExampleInPath
  | ParameterWithSchemaWithExampleInQuery
  | ParameterWithSchemaWithExampleInHeader
  | ParameterWithSchemaWithExampleInCookie;
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export type ParameterWithSchemaWithExamples =
  | ParameterWithSchemaWithExamplesInPath
  | ParameterWithSchemaWithExamplesInQuery
  | ParameterWithSchemaWithExamplesInHeader
  | ParameterWithSchemaWithExamplesInCookie;
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export type ParameterWithContent = ParameterWithContentInPath | ParameterWithContentNotInPath;
/**
 * Each Media Type Object provides schema and examples for a the media type identified by its key.  Media Type Objects can be used in a Content Object.
 */
export type MediaType = MediaTypeWithExample | MediaTypeWithExamples;
/**
 * The Header Object follows the structure of the Parameter Object, with the following changes:  1. `name` MUST NOT be specified, it is given in the Headers Object. 1. `in` MUST NOT be specified, it is implicitly in `header`. 1. All traits that are affected by the location MUST be applicable to a location of `header` (for example, `style`).
 */
export type Header = HeaderWithSchema | HeaderWithContent;
/**
 * The Header Object follows the structure of the Parameter Object, with the following changes:  1. `name` MUST NOT be specified, it is given in the Headers Object. 1. `in` MUST NOT be specified, it is implicitly in `header`. 1. All traits that are affected by the location MUST be applicable to a location of `header` (for example, `style`).
 */
export type HeaderWithSchema = HeaderWithSchemaWithExample | HeaderWithSchemaWithExamples;
/**
 * The `Link Object` is responsible for defining a possible operation based on a single response.
 */
export type Link = LinkWithOperationRef | LinkWithOperationId;
/**
 * Allows the definition of a security scheme that can be used by the operations. Supported schemes are HTTP authentication, an API key (either as a header or as a query parameter) and OAuth2's common flows (implicit, password, application and access code).
 */
export type SecurityScheme =
  | ApiKeySecurityScheme
  | HttpSecurityScheme
  | OAuth2SecurityScheme
  | OpenIdConnectSecurityScheme;
export type HttpSecurityScheme = NonBearerHttpSecurityScheme | BearerHttpSecurityScheme;

/**
 * This is the root document object for the API specification. It combines what previously was the Resource Listing and API Declaration (version 1.2 and earlier) together into one document.
 */
export interface Openapi3 {
  openapi: string;
  info: Info;
  externalDocs?: ExternalDocumentation;
  servers?: Server[];
  security?: SecurityRequirement[];
  tags?: Tag[];
  paths: Paths;
  components?: Components;
}
/**
 * The object provides metadata about the API. The metadata can be used by the clients if needed, and can be presented in editing or documentation generation tools for convenience.
 */
export interface Info {
  title: string;
  description?: string;
  termsOfService?: string;
  contact?: Contact;
  license?: License;
  version: string;
}
/**
 * Contact information for the exposed API.
 */
export interface Contact {
  name?: string;
  url?: string;
  email?: string;
}
/**
 * License information for the exposed API.
 */
export interface License {
  name: string;
  url?: string;
}
/**
 * Allows referencing an external resource for extended documentation.
 */
export interface ExternalDocumentation {
  description?: string;
  url: string;
}
/**
 * An object representing a Server.
 */
export interface Server {
  url: string;
  description?: string;
  variables?: {
    [k: string]: ServerVariable;
  };
}
/**
 * An object representing a Server Variable for server URL template substitution.
 */
export interface ServerVariable {
  enum?: string[];
  default: string;
  description?: string;
}
/**
 * Lists the required security schemes to execute this operation. The name used for each property MUST correspond to a security scheme declared in the Security Schemes under the Components Object.  Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized. This enables support for scenarios where there multiple query parameters or HTTP headers are required to convey security information.  When a list of Security Requirement Objects is defined on the Open API object or Operation Object, only one of Security Requirement Objects in the list needs to be satisfied to authorize.
 */
export interface SecurityRequirement {
  [k: string]: string[];
}
/**
 * Allows adding meta data to a single tag that is used by the Operation Object. It is not mandatory to have a Tag Object per tag used there.
 */
export interface Tag {
  name: string;
  description?: string;
  externalDocs?: ExternalDocumentation;
}
/**
 * Holds the relative paths to the individual endpoints and their operations. The path is appended to the URL from the `Server Object` in order to construct the full URL.  The Paths MAY be empty, due to ACL constraints.
 */
export interface Paths {}
/**
 * Describes the operations available on a single path. A Path Item MAY be empty, due to ACL constraints. The path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.
 *
 * This interface was referenced by `Paths`'s JSON-Schema definition
 * via the `patternProperty` "^\/".
 */
export interface PathItem {
  $ref?: string;
  summary?: string;
  description?: string;
  get?: Operation;
  put?: Operation;
  post?: Operation;
  delete?: Operation;
  options?: Operation;
  head?: Operation;
  patch?: Operation;
  trace?: Operation;
  servers?: Server[];
  parameters?: (Parameter | Reference)[];
}
/**
 * Describes a single API operation on a path.
 */
export interface Operation {
  tags?: string[];
  summary?: string;
  description?: string;
  externalDocs?: ExternalDocumentation;
  operationId?: string;
  parameters?: (Parameter | Reference)[];
  requestBody?: RequestBody | Reference;
  responses: Responses;
  callbacks?: {
    [k: string]: Callback | Reference;
  };
  deprecated?: boolean;
  security?: SecurityRequirement[];
  servers?: Server[];
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface ParameterWithSchemaWithExampleInPath {
  name: string;
  in: "path";
  description?: string;
  required: true;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "matrix" | "label" | "simple";
  explode?: boolean;
  allowReserved?: boolean;
  schema: Schema | Reference;
  example?: any;
}
/**
 * The Schema Object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. This object is an extended subset of the JSON Schema Specification Wright Draft 00.  Further information about the properties can be found in JSON Schema Core and JSON Schema Validation. Unless stated otherwise, the property definitions follow the JSON Schema specification as referenced here.
 */
export interface Schema {
  title?: string;
  multipleOf?: number;
  maximum?: number;
  exclusiveMaximum?: boolean;
  minimum?: number;
  exclusiveMinimum?: boolean;
  maxLength?: number;
  minLength?: number;
  pattern?: string;
  maxItems?: number;
  minItems?: number;
  uniqueItems?: boolean;
  maxProperties?: number;
  minProperties?: number;
  required?: string[];
  enum?: any[];
  type?: "array" | "boolean" | "integer" | "number" | "object" | "string";
  not?: Schema | Reference;
  allOf?: (Schema | Reference)[];
  oneOf?: (Schema | Reference)[];
  anyOf?: (Schema | Reference)[];
  items?: Schema | Reference;
  properties?: {
    [k: string]: Schema | Reference;
  };
  additionalProperties?: Schema | Reference | boolean;
  description?: string;
  format?: string;
  default?: any;
  nullable?: boolean;
  discriminator?: Discriminator;
  readOnly?: boolean;
  writeOnly?: boolean;
  example?: any;
  externalDocs?: ExternalDocumentation;
  deprecated?: boolean;
  xml?: Xml;
}
/**
 * A simple object to allow referencing other components in the specification, internally and externally.  The Reference Object is defined by JSON Reference and follows the same structure, behavior and rules.   For this specification, reference resolution is done as defined by the JSON Reference specification and not by the JSON Schema specification.
 */
export interface Reference {
  $ref: string;
  [k: string]: any;
}
/**
 * When request bodies or response payloads may be one of a number of different schemas, a `discriminator` object can be used to aid in serialization, deserialization, and validation.  The discriminator is a specific object in a schema which is used to inform the consumer of the specification of an alternative schema based on the value associated with it.  Note, when using the discriminator, _inline_ schemas will not be considered when using the discriminator.
 */
export interface Discriminator {
  propertyName: string;
  mapping?: {
    [k: string]: string;
  };
  [k: string]: any;
}
/**
 * A metadata object that allows for more fine-tuned XML model definitions.  When using arrays, XML element names are *not* inferred (for singular/plural forms) and the `name` property SHOULD be used to add that information. See examples for expected behavior.
 */
export interface Xml {
  name?: string;
  namespace?: string;
  prefix?: string;
  attribute?: boolean;
  wrapped?: boolean;
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface ParameterWithSchemaWithExampleInQuery {
  name: string;
  in: "query";
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "form" | "spaceDelimited" | "pipeDelimited" | "deepObject";
  explode?: boolean;
  allowReserved?: boolean;
  schema: Schema | Reference;
  example?: any;
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface ParameterWithSchemaWithExampleInHeader {
  name: string;
  in: "header";
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "simple";
  explode?: boolean;
  allowReserved?: boolean;
  schema: Schema | Reference;
  example?: any;
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface ParameterWithSchemaWithExampleInCookie {
  name: string;
  in: "cookie";
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "form";
  explode?: boolean;
  allowReserved?: boolean;
  schema: Schema | Reference;
  example?: any;
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface ParameterWithSchemaWithExamplesInPath {
  name: string;
  in: "path";
  description?: string;
  required: true;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "matrix" | "label" | "simple";
  explode?: boolean;
  allowReserved?: boolean;
  schema: Schema | Reference;
  examples: {
    [k: string]: Example | Reference;
  };
}
export interface Example {
  summary?: string;
  description?: string;
  value?: any;
  externalValue?: string;
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface ParameterWithSchemaWithExamplesInQuery {
  name: string;
  in: "query";
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "form" | "spaceDelimited" | "pipeDelimited" | "deepObject";
  explode?: boolean;
  allowReserved?: boolean;
  schema: Schema | Reference;
  examples: {
    [k: string]: Example | Reference;
  };
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface ParameterWithSchemaWithExamplesInHeader {
  name: string;
  in: "header";
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "simple";
  explode?: boolean;
  allowReserved?: boolean;
  schema: Schema | Reference;
  examples: {
    [k: string]: Example | Reference;
  };
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface ParameterWithSchemaWithExamplesInCookie {
  name: string;
  in: "cookie";
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "form";
  explode?: boolean;
  allowReserved?: boolean;
  schema: Schema | Reference;
  examples: {
    [k: string]: Example | Reference;
  };
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface ParameterWithContentInPath {
  name: string;
  in: "path";
  description?: string;
  required?: true;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  content: {
    [k: string]: MediaType;
  };
}
/**
 * Each Media Type Object provides schema and examples for a the media type identified by its key.  Media Type Objects can be used in a Content Object.
 */
export interface MediaTypeWithExample {
  schema?: Schema | Reference;
  example?: any;
  encoding?: {
    [k: string]: Encoding;
  };
}
/**
 * An object representing multipart region encoding for `requestBody` objects.
 */
export interface Encoding {
  contentType?: string;
  headers?: {
    [k: string]: Header;
  };
  style?: "form" | "spaceDelimited" | "pipeDelimited" | "deepObject";
  explode?: boolean;
  allowReserved?: boolean;
}
/**
 * The Header Object follows the structure of the Parameter Object, with the following changes:  1. `name` MUST NOT be specified, it is given in the Headers Object. 1. `in` MUST NOT be specified, it is implicitly in `header`. 1. All traits that are affected by the location MUST be applicable to a location of `header` (for example, `style`).
 */
export interface HeaderWithSchemaWithExample {
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "simple";
  explode?: boolean;
  allowReserved?: boolean;
  schema: Schema | Reference;
  example?: any;
}
/**
 * The Header Object follows the structure of the Parameter Object, with the following changes:  1. `name` MUST NOT be specified, it is given in the Headers Object. 1. `in` MUST NOT be specified, it is implicitly in `header`. 1. All traits that are affected by the location MUST be applicable to a location of `header` (for example, `style`).
 */
export interface HeaderWithSchemaWithExamples {
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "simple";
  explode?: boolean;
  allowReserved?: boolean;
  schema: Schema | Reference;
  examples: {
    [k: string]: Example | Reference;
  };
}
/**
 * The Header Object follows the structure of the Parameter Object, with the following changes:  1. `name` MUST NOT be specified, it is given in the Headers Object. 1. `in` MUST NOT be specified, it is implicitly in `header`. 1. All traits that are affected by the location MUST be applicable to a location of `header` (for example, `style`).
 */
export interface HeaderWithContent {
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  content: {
    [k: string]: MediaType;
  };
}
/**
 * Each Media Type Object provides schema and examples for a the media type identified by its key.  Media Type Objects can be used in a Content Object.
 */
export interface MediaTypeWithExamples {
  schema?: Schema | Reference;
  examples: {
    [k: string]: Example | Reference;
  };
  encoding?: {
    [k: string]: Encoding;
  };
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface ParameterWithContentNotInPath {
  name: string;
  in: "query" | "header" | "cookie";
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  content: {
    [k: string]: MediaType;
  };
}
/**
 * Describes a single request body.
 */
export interface RequestBody {
  description?: string;
  content: {
    [k: string]: MediaType;
  };
  required?: boolean;
}
/**
 * A container for the expected responses of an operation. The container maps a HTTP response code to the expected response.  It is not expected for the documentation to necessarily cover all possible HTTP response codes, since they may not be known in advance. However, it is expected for the documentation to cover a successful operation response and any known errors.  The `default` MAY be used as a default response object for all HTTP codes  that are not covered individually by the specification.  The `Responses Object` MUST contain at least one response code, and it  SHOULD be the response for a successful operation call.
 */
export interface Responses {
  default?: Response | Reference;
}
/**
 * Describes a single response from an API Operation, including design-time, static  `links` to operations based on the response.
 */
export interface Response {
  description: string;
  headers?: {
    [k: string]: Header | Reference;
  };
  content?: {
    [k: string]: MediaType;
  };
  links?: {
    [k: string]: Link | Reference;
  };
}
/**
 * The `Link Object` is responsible for defining a possible operation based on a single response.
 */
export interface LinkWithOperationRef {
  operationRef?: string;
  parameters?: {
    [k: string]: any;
  };
  requestBody?: any;
  description?: string;
  server?: Server;
}
/**
 * The `Link Object` is responsible for defining a possible operation based on a single response.
 */
export interface LinkWithOperationId {
  operationId?: string;
  parameters?: {
    [k: string]: any;
  };
  requestBody?: any;
  description?: string;
  server?: Server;
}
/**
 * A map of possible out-of band callbacks related to the parent operation. Each value in the map is a Path Item Object that describes a set of requests that may be initiated by the API provider and the expected responses. The key value used to identify the callback object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation.
 */
export interface Callback {
  [k: string]: PathItem;
}
/**
 * Holds a set of reusable objects for different aspects of the OAS. All objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object.
 */
export interface Components {
  schemas?: {
    [k: string]: any;
  };
  responses?: {
    [k: string]: any;
  };
  parameters?: {
    [k: string]: any;
  };
  examples?: {
    [k: string]: any;
  };
  requestBodies?: {
    [k: string]: any;
  };
  headers?: {
    [k: string]: any;
  };
  securitySchemes?: {
    [k: string]: any;
  };
  links?: {
    [k: string]: any;
  };
  callbacks?: {
    [k: string]: any;
  };
}
export interface ApiKeySecurityScheme {
  type: "apiKey";
  name: string;
  in: "header" | "query" | "cookie";
  description?: string;
}
export interface NonBearerHttpSecurityScheme {
  scheme: string;
  description?: string;
  type: "http";
}
export interface BearerHttpSecurityScheme {
  scheme: "bearer";
  bearerFormat?: string;
  type: "http";
  description?: string;
}
export interface OAuth2SecurityScheme {
  type: "oauth2";
  flows: OAuthFlows;
  description?: string;
}
/**
 * Allows configuration of the supported OAuth Flows.
 */
export interface OAuthFlows {
  implicit?: ImplicitOAuthFlow;
  password?: PasswordOAuthFlow;
  clientCredentials?: ClientCredentialsFlow;
  authorizationCode?: AuthorizationCodeOAuthFlow;
}
export interface ImplicitOAuthFlow {
  authorizationUrl: string;
  refreshUrl?: string;
  scopes: {
    [k: string]: string;
  };
}
export interface PasswordOAuthFlow {
  tokenUrl: string;
  refreshUrl?: string;
  scopes?: {
    [k: string]: string;
  };
}
export interface ClientCredentialsFlow {
  tokenUrl: string;
  refreshUrl?: string;
  scopes?: {
    [k: string]: string;
  };
}
export interface AuthorizationCodeOAuthFlow {
  authorizationUrl: string;
  tokenUrl: string;
  refreshUrl?: string;
  scopes?: {
    [k: string]: string;
  };
}
export interface OpenIdConnectSecurityScheme {
  type: "openIdConnect";
  openIdConnectUrl: string;
  description?: string;
}
