/**
* This file was automatically generated by json-schema-to-typescript.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run json-schema-to-typescript to regenerate this file.
*/
import { OasExtensibleNode, IOasNodeVisitor } from 'oai-ts-core';

/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export type OasParameter = (OasParameterWithSchema | OasParameterWithContent)
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export type OasParameterWithSchema = (OasParameterWithSchemaWithExample | OasParameterWithSchemaWithExamples)
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export type OasParameterWithSchemaWithExample = (OasParameterWithSchemaWithExampleInPath | OasParameterWithSchemaWithExampleInQuery | OasParameterWithSchemaWithExampleInHeader | OasParameterWithSchemaWithExampleInCookie)
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export type OasParameterWithSchemaWithExamples = (OasParameterWithSchemaWithExamplesInPath | OasParameterWithSchemaWithExamplesInQuery | OasParameterWithSchemaWithExamplesInHeader | OasParameterWithSchemaWithExamplesInCookie)
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export type OasParameterWithContent = (OasParameterWithContentInPath | OasParameterWithContentNotInPath)
/**
 * Each Media Type Object provides schema and examples for a the media type identified by its key.  Media Type Objects can be used in a Content Object.
 */
export type OasMediaType = (OasMediaTypeWithExample | OasMediaTypeWithExamples)
/**
 * The Header Object follows the structure of the Parameter Object, with the following changes:  1. `name` MUST NOT be specified, it is given in the Headers Object. 1. `in` MUST NOT be specified, it is implicitly in `header`. 1. All traits that are affected by the location MUST be applicable to a location of `header` (for example, `style`).
 */
export type OasHeader = (OasHeaderWithSchema | OasHeaderWithContent)
/**
 * The Header Object follows the structure of the Parameter Object, with the following changes:  1. `name` MUST NOT be specified, it is given in the Headers Object. 1. `in` MUST NOT be specified, it is implicitly in `header`. 1. All traits that are affected by the location MUST be applicable to a location of `header` (for example, `style`).
 */
export type OasHeaderWithSchema = (OasHeaderWithSchemaWithExample | OasHeaderWithSchemaWithExamples)
/**
 * The `Link Object` is responsible for defining a possible operation based on a single response.
 */
export type OasLink = (OasLinkWithOperationRef | OasLinkWithOperationId)
/**
 * Allows the definition of a security scheme that can be used by the operations. Supported schemes are HTTP authentication, an API key (either as a header or as a query parameter) and OAuth2's common flows (implicit, password, application and access code).
 */
export type OasSecurityScheme = (OasApiKeySecurityScheme | OasHttpSecurityScheme | OasOAuth2SecurityScheme | OasOpenIdConnectSecurityScheme)
export type OasHttpSecurityScheme = (OasNonBearerHttpSecurityScheme | OasBearerHttpSecurityScheme)

/**
 * This is the root document object for the API specification. It combines what previously was the Resource Listing and API Declaration (version 1.2 and earlier) together into one document.
 */
export interface IOasOpenapi3 {
  openapi: string;
  info: OasInfo;
  externalDocs?: OasExternalDocumentation;
  servers?: OasServer[];
  security?: OasSecurityRequirement[];
  tags?: OasTag[];
  paths: OasPaths;
  components?: OasComponents;
/**
 * This interface was referenced by `Openapi3`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * This is the root document object for the API specification. It combines what previously was the Resource Listing and API Declaration (version 1.2 and earlier) together into one document.
 */
export class OasOpenapi3 extends OasExtensibleNode implements IOasOpenapi3 {
  openapi: string;
  info: OasInfo;
  externalDocs?: OasExternalDocumentation;
  servers?: OasServer[];
  security?: OasSecurityRequirement[];
  tags?: OasTag[];
  paths: OasPaths;
  components?: OasComponents;
/**
 * This interface was referenced by `Openapi3`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;


    /**
    * Creates an OAS 3.0 info OasInfo object..
    * @return {OasInfo}
    */
    public createInfo(): OasInfo {
        let rval: OasInfo = new OasInfo();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 externalDocs OasExternalDocumentation object..
    * @return {OasExternalDocumentation}
    */
    public createExternalDocumentation(): OasExternalDocumentation {
        let rval: OasExternalDocumentation = new OasExternalDocumentation();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 servers OasServer[] object..
    * @return {OasServer[]}
    */
    public createServer(): OasServer[] {
        let rval: OasServer[] = new OasServer[]();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 security OasSecurityRequirement[] object..
    * @return {OasSecurityRequirement[]}
    */
    public createSecurityRequirement(): OasSecurityRequirement[] {
        let rval: OasSecurityRequirement[] = new OasSecurityRequirement[]();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 tags OasTag[] object..
    * @return {OasTag[]}
    */
    public createTag(): OasTag[] {
        let rval: OasTag[] = new OasTag[]();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 paths OasPaths object..
    * @return {OasPaths}
    */
    public createPaths(): OasPaths {
        let rval: OasPaths = new OasPaths();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 components OasComponents object..
    * @return {OasComponents}
    */
    public createComponents(): OasComponents {
        let rval: OasComponents = new OasComponents();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitOpenapi3(<IOasOpenapi3>this);
  }
    
}
  
/**
 * The object provides metadata about the API. The metadata can be used by the clients if needed, and can be presented in editing or documentation generation tools for convenience.
 */
export interface IOasInfo {
  title: string;
  description?: string;
  termsOfService?: string;
  contact?: OasContact;
  license?: OasLicense;
  version: string;
/**
 * This interface was referenced by `Info`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * The object provides metadata about the API. The metadata can be used by the clients if needed, and can be presented in editing or documentation generation tools for convenience.
 */
export class OasInfo extends OasExtensibleNode implements IOasInfo {
  title: string;
  description?: string;
  termsOfService?: string;
  contact?: OasContact;
  license?: OasLicense;
  version: string;
/**
 * This interface was referenced by `Info`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;




    /**
    * Creates an OAS 3.0 contact OasContact object..
    * @return {OasContact}
    */
    public createContact(): OasContact {
        let rval: OasContact = new OasContact();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 license OasLicense object..
    * @return {OasLicense}
    */
    public createLicense(): OasLicense {
        let rval: OasLicense = new OasLicense();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }


/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitInfo(<IOasInfo>this);
  }
    
}
  
/**
 * Contact information for the exposed API.
 */
export interface IOasContact {
  name?: string;
  url?: string;
  email?: string;
/**
 * This interface was referenced by `Contact`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Contact information for the exposed API.
 */
export class OasContact extends OasExtensibleNode implements IOasContact {
  name?: string;
  url?: string;
  email?: string;
/**
 * This interface was referenced by `Contact`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;




/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitContact(<IOasContact>this);
  }
    
}
  
/**
 * License information for the exposed API.
 */
export interface IOasLicense {
  name: string;
  url?: string;
/**
 * This interface was referenced by `License`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * License information for the exposed API.
 */
export class OasLicense extends OasExtensibleNode implements IOasLicense {
  name: string;
  url?: string;
/**
 * This interface was referenced by `License`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;



/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitLicense(<IOasLicense>this);
  }
    
}
  
/**
 * Allows referencing an external resource for extended documentation.
 */
export interface IOasExternalDocumentation {
  description?: string;
  url: string;
/**
 * This interface was referenced by `ExternalDocumentation`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Allows referencing an external resource for extended documentation.
 */
export class OasExternalDocumentation extends OasExtensibleNode implements IOasExternalDocumentation {
  description?: string;
  url: string;
/**
 * This interface was referenced by `ExternalDocumentation`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;



/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitExternalDocumentation(<IOasExternalDocumentation>this);
  }
    
}
  
/**
 * An object representing a Server.
 */
export interface IOasServer {
  url: string;
  description?: string;
  variables?: {
  [k: string]: OasServerVariable;
};
/**
 * This interface was referenced by `Server`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * An object representing a Server.
 */
export class OasServer extends OasExtensibleNode implements IOasServer {
  url: string;
  description?: string;
  variables?: {
  [k: string]: OasServerVariable;
};
/**
 * This interface was referenced by `Server`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;



    /**
    * Creates an Oas ServerVariable object..
    * @return {OasServerVariable}
    */
    public createServerVariable(name: string): OasServerVariable {

        let rval: OasServerVariable = new OasServerVariable(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitServer(<IOasServer>this);
  }
    
}
  
/**
 * An object representing a Server Variable for server URL template substitution.
 */
export interface IOasServerVariable {
  enum?: string[];
  default: string;
  description?: string;
/**
 * This interface was referenced by `ServerVariable`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * An object representing a Server Variable for server URL template substitution.
 */
export class OasServerVariable extends OasExtensibleNode implements IOasServerVariable {
  _name: string;
  enum?: string[];
  default: string;
  description?: string;
/**
 * This interface was referenced by `ServerVariable`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;

  constructor(name: string) {
    super();
    this._name = name;
  }



/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitServerVariable(<IOasServerVariable>this);
  }
    
}
  
/**
 * Lists the required security schemes to execute this operation. The name used for each property MUST correspond to a security scheme declared in the Security Schemes under the Components Object.  Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized. This enables support for scenarios where there multiple query parameters or HTTP headers are required to convey security information.  When a list of Security Requirement Objects is defined on the Open API object or Operation Object, only one of Security Requirement Objects in the list needs to be satisfied to authorize.
 */
export interface IOasSecurityRequirement {
  [k: string]: string[];
}
/**
 * Lists the required security schemes to execute this operation. The name used for each property MUST correspond to a security scheme declared in the Security Schemes under the Components Object.  Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized. This enables support for scenarios where there multiple query parameters or HTTP headers are required to convey security information.  When a list of Security Requirement Objects is defined on the Open API object or Operation Object, only one of Security Requirement Objects in the list needs to be satisfied to authorize.
 */
export class OasSecurityRequirement extends OasExtensibleNode implements IOasSecurityRequirement {
  [k: string]: string[];

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitSecurityRequirement(<IOasSecurityRequirement>this);
  }
    
}
  
/**
 * Allows adding meta data to a single tag that is used by the Operation Object. It is not mandatory to have a Tag Object per tag used there.
 */
export interface IOasTag {
  name: string;
  description?: string;
  externalDocs?: OasExternalDocumentation;
/**
 * This interface was referenced by `Tag`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Allows adding meta data to a single tag that is used by the Operation Object. It is not mandatory to have a Tag Object per tag used there.
 */
export class OasTag extends OasExtensibleNode implements IOasTag {
  name: string;
  description?: string;
  externalDocs?: OasExternalDocumentation;
/**
 * This interface was referenced by `Tag`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;



    /**
    * Creates an OAS 3.0 externalDocs OasExternalDocumentation object..
    * @return {OasExternalDocumentation}
    */
    public createExternalDocumentation(): OasExternalDocumentation {
        let rval: OasExternalDocumentation = new OasExternalDocumentation();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitTag(<IOasTag>this);
  }
    
}
  
/**
 * Holds the relative paths to the individual endpoints and their operations. The path is appended to the URL from the `Server Object` in order to construct the full URL.  The Paths MAY be empty, due to ACL constraints.
 */
export interface IOasPaths {

}
/**
 * Holds the relative paths to the individual endpoints and their operations. The path is appended to the URL from the `Server Object` in order to construct the full URL.  The Paths MAY be empty, due to ACL constraints.
 */
export class OasPaths extends OasExtensibleNode implements IOasPaths {


    /**
    * Creates an Oas PathItem object..
    * @return {OasPathItem}
    */
    public createPathItem(path: string): OasPathItem {

        let rval: OasPathItem = new OasPathItem(path);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitPaths(<IOasPaths>this);
  }
    
}
  
/**
 * Describes the operations available on a single path. A Path Item MAY be empty, due to ACL constraints. The path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.
 * 
 * This interface was referenced by `Paths`'s JSON-Schema definition
 * via the `patternProperty` "^\/".
 */
export interface IOasPathItem {
  $ref?: string;
  summary?: string;
  description?: string;
  get?: OasOperation;
  put?: OasOperation;
  post?: OasOperation;
  delete?: OasOperation;
  options?: OasOperation;
  head?: OasOperation;
  patch?: OasOperation;
  trace?: OasOperation;
  servers?: OasServer[];
  parameters?: (OasParameter | OasReference)[];
/**
 * This interface was referenced by `PathItem`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Describes the operations available on a single path. A Path Item MAY be empty, due to ACL constraints. The path itself is still exposed to the documentation viewer but they will not know which operations and parameters are available.
 * 
 * This interface was referenced by `Paths`'s JSON-Schema definition
 * via the `patternProperty` "^\/".
 */
export class OasPathItem extends OasExtensibleNode implements IOasPathItem {
  _name: string;
  $ref?: string;
  summary?: string;
  description?: string;
  get?: OasOperation;
  put?: OasOperation;
  post?: OasOperation;
  delete?: OasOperation;
  options?: OasOperation;
  head?: OasOperation;
  patch?: OasOperation;
  trace?: OasOperation;
  servers?: OasServer[];
  parameters?: (OasParameter | OasReference)[];
/**
 * This interface was referenced by `PathItem`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;

  constructor(name: string) {
    super();
    this._name = name;
  }



    /**
    * Creates an OAS 3.0 get OasOperation object..
    * @return {OasOperation}
    */
    public createGetOperation(): OasOperation {
        let rval: OasOperation = new OasOperation();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 put OasOperation object..
    * @return {OasOperation}
    */
    public createPutOperation(): OasOperation {
        let rval: OasOperation = new OasOperation();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 post OasOperation object..
    * @return {OasOperation}
    */
    public createPostOperation(): OasOperation {
        let rval: OasOperation = new OasOperation();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 delete OasOperation object..
    * @return {OasOperation}
    */
    public createDeleteOperation(): OasOperation {
        let rval: OasOperation = new OasOperation();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 options OasOperation object..
    * @return {OasOperation}
    */
    public createOptionsOperation(): OasOperation {
        let rval: OasOperation = new OasOperation();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 head OasOperation object..
    * @return {OasOperation}
    */
    public createHeadOperation(): OasOperation {
        let rval: OasOperation = new OasOperation();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 patch OasOperation object..
    * @return {OasOperation}
    */
    public createPatchOperation(): OasOperation {
        let rval: OasOperation = new OasOperation();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 trace OasOperation object..
    * @return {OasOperation}
    */
    public createTraceOperation(): OasOperation {
        let rval: OasOperation = new OasOperation();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 servers OasServer[] object..
    * @return {OasServer[]}
    */
    public createServer(): OasServer[] {
        let rval: OasServer[] = new OasServer[]();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 parameters OasParameter object..
    * @return {OasParameter}
    */
    public createParametersParameter(): OasParameter {
        let rval: OasParameter = new OasParameter();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitPathItem(<IOasPathItem>this);
  }
    
}
  
/**
 * Describes a single API operation on a path.
 */
export interface IOasOperation {
  tags?: string[];
  summary?: string;
  description?: string;
  externalDocs?: OasExternalDocumentation;
  operationId?: string;
  parameters?: (OasParameter | OasReference)[];
  requestBody?: (OasRequestBody | OasReference);
  responses: OasResponses;
  callbacks?: {
  [k: string]: (OasCallback | OasReference);
};
  deprecated?: boolean;
  security?: OasSecurityRequirement[];
  servers?: OasServer[];
/**
 * This interface was referenced by `Operation`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Describes a single API operation on a path.
 */
export class OasOperation extends OasExtensibleNode implements IOasOperation {
  tags?: string[];
  summary?: string;
  description?: string;
  externalDocs?: OasExternalDocumentation;
  operationId?: string;
  parameters?: (OasParameter | OasReference)[];
  requestBody?: (OasRequestBody | OasReference);
  responses: OasResponses;
  callbacks?: {
  [k: string]: (OasCallback | OasReference);
};
  deprecated?: boolean;
  security?: OasSecurityRequirement[];
  servers?: OasServer[];
/**
 * This interface was referenced by `Operation`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;




    /**
    * Creates an OAS 3.0 externalDocs OasExternalDocumentation object..
    * @return {OasExternalDocumentation}
    */
    public createExternalDocumentation(): OasExternalDocumentation {
        let rval: OasExternalDocumentation = new OasExternalDocumentation();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }


    /**
    * Creates an OAS 3.0 parameters OasParameter object..
    * @return {OasParameter}
    */
    public createParametersParameter(): OasParameter {
        let rval: OasParameter = new OasParameter();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }


    /**
    * Creates an OAS 3.0 responses OasResponses object..
    * @return {OasResponses}
    */
    public createResponses(): OasResponses {
        let rval: OasResponses = new OasResponses();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an Oas ??1 object..
    * @return {(OasCallback | OasReference)}
    */
    public create??2(name: string): (OasCallback | OasReference) {

        let rval: (OasCallback | OasReference) = new (OasCallback | OasReference)(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }


    /**
    * Creates an OAS 3.0 security OasSecurityRequirement[] object..
    * @return {OasSecurityRequirement[]}
    */
    public createSecurityRequirement(): OasSecurityRequirement[] {
        let rval: OasSecurityRequirement[] = new OasSecurityRequirement[]();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 servers OasServer[] object..
    * @return {OasServer[]}
    */
    public createServer(): OasServer[] {
        let rval: OasServer[] = new OasServer[]();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitOperation(<IOasOperation>this);
  }
    
}
  
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface IOasParameterWithSchemaWithExampleInPath {
  name: string;
  in: "path";
  description?: string;
  required: true;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: ("matrix" | "label" | "simple");
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  example?: any;
/**
 * This interface was referenced by `ParameterWithSchemaWithExampleInPath`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export class OasParameterWithSchemaWithExampleInPath extends OasExtensibleNode implements IOasParameterWithSchemaWithExampleInPath {
  name: string;
  in: "path";
  description?: string;
  required: true;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: ("matrix" | "label" | "simple");
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  example?: any;
/**
 * This interface was referenced by `ParameterWithSchemaWithExampleInPath`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;












/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitParameterWithSchemaWithExampleInPath(<IOasParameterWithSchemaWithExampleInPath>this);
  }
    
}
  
/**
 * The Schema Object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. This object is an extended subset of the JSON Schema Specification Wright Draft 00.  Further information about the properties can be found in JSON Schema Core and JSON Schema Validation. Unless stated otherwise, the property definitions follow the JSON Schema specification as referenced here.
 */
export interface IOasSchema {
  title?: string;
  multipleOf?: number;
  maximum?: number;
  exclusiveMaximum?: boolean;
  minimum?: number;
  exclusiveMinimum?: boolean;
  maxLength?: number;
  minLength?: number;
  pattern?: string;
  maxItems?: number;
  minItems?: number;
  uniqueItems?: boolean;
  maxProperties?: number;
  minProperties?: number;
  required?: string[];
  enum?: any[];
  type?: ("array" | "boolean" | "integer" | "number" | "object" | "string");
  not?: (OasSchema | OasReference);
  allOf?: (OasSchema | OasReference)[];
  oneOf?: (OasSchema | OasReference)[];
  anyOf?: (OasSchema | OasReference)[];
  items?: (OasSchema | OasReference);
  properties?: {
  [k: string]: (OasSchema | OasReference);
};
  additionalProperties?: (OasSchema | OasReference | boolean);
  description?: string;
  format?: string;
  default?: any;
  nullable?: boolean;
  discriminator?: OasDiscriminator;
  readOnly?: boolean;
  writeOnly?: boolean;
  example?: any;
  externalDocs?: OasExternalDocumentation;
  deprecated?: boolean;
  xml?: OasXml;
/**
 * This interface was referenced by `Schema`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * The Schema Object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. This object is an extended subset of the JSON Schema Specification Wright Draft 00.  Further information about the properties can be found in JSON Schema Core and JSON Schema Validation. Unless stated otherwise, the property definitions follow the JSON Schema specification as referenced here.
 */
export class OasSchema extends OasExtensibleNode implements IOasSchema {
  title?: string;
  multipleOf?: number;
  maximum?: number;
  exclusiveMaximum?: boolean;
  minimum?: number;
  exclusiveMinimum?: boolean;
  maxLength?: number;
  minLength?: number;
  pattern?: string;
  maxItems?: number;
  minItems?: number;
  uniqueItems?: boolean;
  maxProperties?: number;
  minProperties?: number;
  required?: string[];
  enum?: any[];
  type?: ("array" | "boolean" | "integer" | "number" | "object" | "string");
  not?: (OasSchema | OasReference);
  allOf?: (OasSchema | OasReference)[];
  oneOf?: (OasSchema | OasReference)[];
  anyOf?: (OasSchema | OasReference)[];
  items?: (OasSchema | OasReference);
  properties?: {
  [k: string]: (OasSchema | OasReference);
};
  additionalProperties?: (OasSchema | OasReference | boolean);
  description?: string;
  format?: string;
  default?: any;
  nullable?: boolean;
  discriminator?: OasDiscriminator;
  readOnly?: boolean;
  writeOnly?: boolean;
  example?: any;
  externalDocs?: OasExternalDocumentation;
  deprecated?: boolean;
  xml?: OasXml;
/**
 * This interface was referenced by `Schema`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;



















    /**
    * Creates an OAS 3.0 allOf OasSchema object..
    * @return {OasSchema}
    */
    public createAllOfSchema(): OasSchema {
        let rval: OasSchema = new OasSchema();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 oneOf OasSchema object..
    * @return {OasSchema}
    */
    public createOneOfSchema(): OasSchema {
        let rval: OasSchema = new OasSchema();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 anyOf OasSchema object..
    * @return {OasSchema}
    */
    public createAnyOfSchema(): OasSchema {
        let rval: OasSchema = new OasSchema();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }


    /**
    * Creates an Oas ??1 object..
    * @return {(OasSchema | OasReference)}
    */
    public create??2(name: string): (OasSchema | OasReference) {

        let rval: (OasSchema | OasReference) = new (OasSchema | OasReference)(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }






    /**
    * Creates an OAS 3.0 discriminator OasDiscriminator object..
    * @return {OasDiscriminator}
    */
    public createDiscriminator(): OasDiscriminator {
        let rval: OasDiscriminator = new OasDiscriminator();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }




    /**
    * Creates an OAS 3.0 externalDocs OasExternalDocumentation object..
    * @return {OasExternalDocumentation}
    */
    public createExternalDocumentation(): OasExternalDocumentation {
        let rval: OasExternalDocumentation = new OasExternalDocumentation();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }


    /**
    * Creates an OAS 3.0 xml OasXml object..
    * @return {OasXml}
    */
    public createXml(): OasXml {
        let rval: OasXml = new OasXml();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitSchema(<IOasSchema>this);
  }
    
}
  
/**
 * A simple object to allow referencing other components in the specification, internally and externally.  The Reference Object is defined by JSON Reference and follows the same structure, behavior and rules.   For this specification, reference resolution is done as defined by the JSON Reference specification and not by the JSON Schema specification.
 */
export interface IOasReference {
  $ref: string;
  [k: string]: any;
}
/**
 * A simple object to allow referencing other components in the specification, internally and externally.  The Reference Object is defined by JSON Reference and follows the same structure, behavior and rules.   For this specification, reference resolution is done as defined by the JSON Reference specification and not by the JSON Schema specification.
 */
export class OasReference extends OasExtensibleNode implements IOasReference {
  $ref: string;
  [k: string]: any;


/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitReference(<IOasReference>this);
  }
    
}
  
/**
 * When request bodies or response payloads may be one of a number of different schemas, a `discriminator` object can be used to aid in serialization, deserialization, and validation.  The discriminator is a specific object in a schema which is used to inform the consumer of the specification of an alternative schema based on the value associated with it.  Note, when using the discriminator, _inline_ schemas will not be considered when using the discriminator.
 */
export interface IOasDiscriminator {
  propertyName: string;
  mapping?: {
  [k: string]: string;
};
  [k: string]: any;
}
/**
 * When request bodies or response payloads may be one of a number of different schemas, a `discriminator` object can be used to aid in serialization, deserialization, and validation.  The discriminator is a specific object in a schema which is used to inform the consumer of the specification of an alternative schema based on the value associated with it.  Note, when using the discriminator, _inline_ schemas will not be considered when using the discriminator.
 */
export class OasDiscriminator extends OasExtensibleNode implements IOasDiscriminator {
  propertyName: string;
  mapping?: {
  [k: string]: string;
};
  [k: string]: any;


    /**
    * Creates an Oas ??1 object..
    * @return {string}
    */
    public create??2(name: string): string {

        let rval: string = new string(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitDiscriminator(<IOasDiscriminator>this);
  }
    
}
  
/**
 * A metadata object that allows for more fine-tuned XML model definitions.  When using arrays, XML element names are *not* inferred (for singular/plural forms) and the `name` property SHOULD be used to add that information. See examples for expected behavior.
 */
export interface IOasXml {
  name?: string;
  namespace?: string;
  prefix?: string;
  attribute?: boolean;
  wrapped?: boolean;
/**
 * This interface was referenced by `Xml`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * A metadata object that allows for more fine-tuned XML model definitions.  When using arrays, XML element names are *not* inferred (for singular/plural forms) and the `name` property SHOULD be used to add that information. See examples for expected behavior.
 */
export class OasXml extends OasExtensibleNode implements IOasXml {
  name?: string;
  namespace?: string;
  prefix?: string;
  attribute?: boolean;
  wrapped?: boolean;
/**
 * This interface was referenced by `Xml`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;






/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitXml(<IOasXml>this);
  }
    
}
  
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface IOasParameterWithSchemaWithExampleInQuery {
  name: string;
  in: "query";
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: ("form" | "spaceDelimited" | "pipeDelimited" | "deepObject");
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  example?: any;
/**
 * This interface was referenced by `ParameterWithSchemaWithExampleInQuery`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export class OasParameterWithSchemaWithExampleInQuery extends OasExtensibleNode implements IOasParameterWithSchemaWithExampleInQuery {
  name: string;
  in: "query";
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: ("form" | "spaceDelimited" | "pipeDelimited" | "deepObject");
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  example?: any;
/**
 * This interface was referenced by `ParameterWithSchemaWithExampleInQuery`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;












/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitParameterWithSchemaWithExampleInQuery(<IOasParameterWithSchemaWithExampleInQuery>this);
  }
    
}
  
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface IOasParameterWithSchemaWithExampleInHeader {
  name: string;
  in: "header";
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "simple";
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  example?: any;
/**
 * This interface was referenced by `ParameterWithSchemaWithExampleInHeader`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export class OasParameterWithSchemaWithExampleInHeader extends OasExtensibleNode implements IOasParameterWithSchemaWithExampleInHeader {
  name: string;
  in: "header";
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "simple";
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  example?: any;
/**
 * This interface was referenced by `ParameterWithSchemaWithExampleInHeader`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;












/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitParameterWithSchemaWithExampleInHeader(<IOasParameterWithSchemaWithExampleInHeader>this);
  }
    
}
  
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface IOasParameterWithSchemaWithExampleInCookie {
  name: string;
  in: "cookie";
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "form";
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  example?: any;
/**
 * This interface was referenced by `ParameterWithSchemaWithExampleInCookie`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export class OasParameterWithSchemaWithExampleInCookie extends OasExtensibleNode implements IOasParameterWithSchemaWithExampleInCookie {
  name: string;
  in: "cookie";
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "form";
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  example?: any;
/**
 * This interface was referenced by `ParameterWithSchemaWithExampleInCookie`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;












/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitParameterWithSchemaWithExampleInCookie(<IOasParameterWithSchemaWithExampleInCookie>this);
  }
    
}
  
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface IOasParameterWithSchemaWithExamplesInPath {
  name: string;
  in: "path";
  description?: string;
  required: true;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: ("matrix" | "label" | "simple");
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  examples: {
  [k: string]: (OasExample | OasReference);
};
/**
 * This interface was referenced by `ParameterWithSchemaWithExamplesInPath`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export class OasParameterWithSchemaWithExamplesInPath extends OasExtensibleNode implements IOasParameterWithSchemaWithExamplesInPath {
  name: string;
  in: "path";
  description?: string;
  required: true;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: ("matrix" | "label" | "simple");
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  examples: {
  [k: string]: (OasExample | OasReference);
};
/**
 * This interface was referenced by `ParameterWithSchemaWithExamplesInPath`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;











    /**
    * Creates an Oas ??1 object..
    * @return {(OasExample | OasReference)}
    */
    public create??2(name: string): (OasExample | OasReference) {

        let rval: (OasExample | OasReference) = new (OasExample | OasReference)(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitParameterWithSchemaWithExamplesInPath(<IOasParameterWithSchemaWithExamplesInPath>this);
  }
    
}
  
export interface IOasExample {
  summary?: string;
  description?: string;
  value?: any;
  externalValue?: string;
/**
 * This interface was referenced by `Example`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
export class OasExample extends OasExtensibleNode implements IOasExample {
  summary?: string;
  description?: string;
  value?: any;
  externalValue?: string;
/**
 * This interface was referenced by `Example`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;





/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitExample(<IOasExample>this);
  }
    
}
  
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface IOasParameterWithSchemaWithExamplesInQuery {
  name: string;
  in: "query";
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: ("form" | "spaceDelimited" | "pipeDelimited" | "deepObject");
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  examples: {
  [k: string]: (OasExample | OasReference);
};
/**
 * This interface was referenced by `ParameterWithSchemaWithExamplesInQuery`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export class OasParameterWithSchemaWithExamplesInQuery extends OasExtensibleNode implements IOasParameterWithSchemaWithExamplesInQuery {
  name: string;
  in: "query";
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: ("form" | "spaceDelimited" | "pipeDelimited" | "deepObject");
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  examples: {
  [k: string]: (OasExample | OasReference);
};
/**
 * This interface was referenced by `ParameterWithSchemaWithExamplesInQuery`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;











    /**
    * Creates an Oas ??1 object..
    * @return {(OasExample | OasReference)}
    */
    public create??2(name: string): (OasExample | OasReference) {

        let rval: (OasExample | OasReference) = new (OasExample | OasReference)(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitParameterWithSchemaWithExamplesInQuery(<IOasParameterWithSchemaWithExamplesInQuery>this);
  }
    
}
  
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface IOasParameterWithSchemaWithExamplesInHeader {
  name: string;
  in: "header";
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "simple";
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  examples: {
  [k: string]: (OasExample | OasReference);
};
/**
 * This interface was referenced by `ParameterWithSchemaWithExamplesInHeader`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export class OasParameterWithSchemaWithExamplesInHeader extends OasExtensibleNode implements IOasParameterWithSchemaWithExamplesInHeader {
  name: string;
  in: "header";
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "simple";
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  examples: {
  [k: string]: (OasExample | OasReference);
};
/**
 * This interface was referenced by `ParameterWithSchemaWithExamplesInHeader`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;











    /**
    * Creates an Oas ??1 object..
    * @return {(OasExample | OasReference)}
    */
    public create??2(name: string): (OasExample | OasReference) {

        let rval: (OasExample | OasReference) = new (OasExample | OasReference)(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitParameterWithSchemaWithExamplesInHeader(<IOasParameterWithSchemaWithExamplesInHeader>this);
  }
    
}
  
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface IOasParameterWithSchemaWithExamplesInCookie {
  name: string;
  in: "cookie";
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "form";
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  examples: {
  [k: string]: (OasExample | OasReference);
};
/**
 * This interface was referenced by `ParameterWithSchemaWithExamplesInCookie`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export class OasParameterWithSchemaWithExamplesInCookie extends OasExtensibleNode implements IOasParameterWithSchemaWithExamplesInCookie {
  name: string;
  in: "cookie";
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "form";
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  examples: {
  [k: string]: (OasExample | OasReference);
};
/**
 * This interface was referenced by `ParameterWithSchemaWithExamplesInCookie`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;











    /**
    * Creates an Oas ??1 object..
    * @return {(OasExample | OasReference)}
    */
    public create??2(name: string): (OasExample | OasReference) {

        let rval: (OasExample | OasReference) = new (OasExample | OasReference)(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitParameterWithSchemaWithExamplesInCookie(<IOasParameterWithSchemaWithExamplesInCookie>this);
  }
    
}
  
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface IOasParameterWithContentInPath {
  name: string;
  in: "path";
  description?: string;
  required?: true;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  content: {
  [k: string]: OasMediaType;
};
/**
 * This interface was referenced by `ParameterWithContentInPath`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export class OasParameterWithContentInPath extends OasExtensibleNode implements IOasParameterWithContentInPath {
  name: string;
  in: "path";
  description?: string;
  required?: true;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  content: {
  [k: string]: OasMediaType;
};
/**
 * This interface was referenced by `ParameterWithContentInPath`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;







    /**
    * Creates an Oas MediaType object..
    * @return {OasMediaType}
    */
    public createMediaType(name: string): OasMediaType {

        let rval: OasMediaType = new OasMediaType(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitParameterWithContentInPath(<IOasParameterWithContentInPath>this);
  }
    
}
  
/**
 * Each Media Type Object provides schema and examples for a the media type identified by its key.  Media Type Objects can be used in a Content Object.
 */
export interface IOasMediaTypeWithExample {
  schema?: (OasSchema | OasReference);
  example?: any;
  encoding?: {
  [k: string]: OasEncoding;
};
/**
 * This interface was referenced by `MediaTypeWithExample`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Each Media Type Object provides schema and examples for a the media type identified by its key.  Media Type Objects can be used in a Content Object.
 */
export class OasMediaTypeWithExample extends OasExtensibleNode implements IOasMediaTypeWithExample {
  schema?: (OasSchema | OasReference);
  example?: any;
  encoding?: {
  [k: string]: OasEncoding;
};
/**
 * This interface was referenced by `MediaTypeWithExample`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;



    /**
    * Creates an Oas Encoding object..
    * @return {OasEncoding}
    */
    public createEncoding(name: string): OasEncoding {

        let rval: OasEncoding = new OasEncoding(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitMediaTypeWithExample(<IOasMediaTypeWithExample>this);
  }
    
}
  
/**
 * An object representing multipart region encoding for `requestBody` objects.
 */
export interface IOasEncoding {
  contentType?: string;
  headers?: {
  [k: string]: OasHeader;
};
  style?: ("form" | "spaceDelimited" | "pipeDelimited" | "deepObject");
  explode?: boolean;
  allowReserved?: boolean;
}
/**
 * An object representing multipart region encoding for `requestBody` objects.
 */
export class OasEncoding extends OasExtensibleNode implements IOasEncoding {
  _name: string;
  contentType?: string;
  headers?: {
  [k: string]: OasHeader;
};
  style?: ("form" | "spaceDelimited" | "pipeDelimited" | "deepObject");
  explode?: boolean;
  allowReserved?: boolean;

  constructor(name: string) {
    super();
    this._name = name;
  }

    /**
    * Creates an Oas Header object..
    * @return {OasHeader}
    */
    public createHeader(name: string): OasHeader {

        let rval: OasHeader = new OasHeader(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }



/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitEncoding(<IOasEncoding>this);
  }
    
}
  
/**
 * The Header Object follows the structure of the Parameter Object, with the following changes:  1. `name` MUST NOT be specified, it is given in the Headers Object. 1. `in` MUST NOT be specified, it is implicitly in `header`. 1. All traits that are affected by the location MUST be applicable to a location of `header` (for example, `style`).
 */
export interface IOasHeaderWithSchemaWithExample {
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "simple";
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  example?: any;
/**
 * This interface was referenced by `HeaderWithSchemaWithExample`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * The Header Object follows the structure of the Parameter Object, with the following changes:  1. `name` MUST NOT be specified, it is given in the Headers Object. 1. `in` MUST NOT be specified, it is implicitly in `header`. 1. All traits that are affected by the location MUST be applicable to a location of `header` (for example, `style`).
 */
export class OasHeaderWithSchemaWithExample extends OasExtensibleNode implements IOasHeaderWithSchemaWithExample {
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "simple";
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  example?: any;
/**
 * This interface was referenced by `HeaderWithSchemaWithExample`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;










/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitHeaderWithSchemaWithExample(<IOasHeaderWithSchemaWithExample>this);
  }
    
}
  
/**
 * The Header Object follows the structure of the Parameter Object, with the following changes:  1. `name` MUST NOT be specified, it is given in the Headers Object. 1. `in` MUST NOT be specified, it is implicitly in `header`. 1. All traits that are affected by the location MUST be applicable to a location of `header` (for example, `style`).
 */
export interface IOasHeaderWithSchemaWithExamples {
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "simple";
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  examples: {
  [k: string]: (OasExample | OasReference);
};
/**
 * This interface was referenced by `HeaderWithSchemaWithExamples`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * The Header Object follows the structure of the Parameter Object, with the following changes:  1. `name` MUST NOT be specified, it is given in the Headers Object. 1. `in` MUST NOT be specified, it is implicitly in `header`. 1. All traits that are affected by the location MUST be applicable to a location of `header` (for example, `style`).
 */
export class OasHeaderWithSchemaWithExamples extends OasExtensibleNode implements IOasHeaderWithSchemaWithExamples {
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  style?: "simple";
  explode?: boolean;
  allowReserved?: boolean;
  schema: (OasSchema | OasReference);
  examples: {
  [k: string]: (OasExample | OasReference);
};
/**
 * This interface was referenced by `HeaderWithSchemaWithExamples`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;









    /**
    * Creates an Oas ??1 object..
    * @return {(OasExample | OasReference)}
    */
    public create??2(name: string): (OasExample | OasReference) {

        let rval: (OasExample | OasReference) = new (OasExample | OasReference)(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitHeaderWithSchemaWithExamples(<IOasHeaderWithSchemaWithExamples>this);
  }
    
}
  
/**
 * The Header Object follows the structure of the Parameter Object, with the following changes:  1. `name` MUST NOT be specified, it is given in the Headers Object. 1. `in` MUST NOT be specified, it is implicitly in `header`. 1. All traits that are affected by the location MUST be applicable to a location of `header` (for example, `style`).
 */
export interface IOasHeaderWithContent {
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  content: {
  [k: string]: OasMediaType;
};
/**
 * This interface was referenced by `HeaderWithContent`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * The Header Object follows the structure of the Parameter Object, with the following changes:  1. `name` MUST NOT be specified, it is given in the Headers Object. 1. `in` MUST NOT be specified, it is implicitly in `header`. 1. All traits that are affected by the location MUST be applicable to a location of `header` (for example, `style`).
 */
export class OasHeaderWithContent extends OasExtensibleNode implements IOasHeaderWithContent {
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  content: {
  [k: string]: OasMediaType;
};
/**
 * This interface was referenced by `HeaderWithContent`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;





    /**
    * Creates an Oas MediaType object..
    * @return {OasMediaType}
    */
    public createMediaType(name: string): OasMediaType {

        let rval: OasMediaType = new OasMediaType(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitHeaderWithContent(<IOasHeaderWithContent>this);
  }
    
}
  
/**
 * Each Media Type Object provides schema and examples for a the media type identified by its key.  Media Type Objects can be used in a Content Object.
 */
export interface IOasMediaTypeWithExamples {
  schema?: (OasSchema | OasReference);
  examples: {
  [k: string]: (OasExample | OasReference);
};
  encoding?: {
  [k: string]: OasEncoding;
};
/**
 * This interface was referenced by `MediaTypeWithExamples`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Each Media Type Object provides schema and examples for a the media type identified by its key.  Media Type Objects can be used in a Content Object.
 */
export class OasMediaTypeWithExamples extends OasExtensibleNode implements IOasMediaTypeWithExamples {
  schema?: (OasSchema | OasReference);
  examples: {
  [k: string]: (OasExample | OasReference);
};
  encoding?: {
  [k: string]: OasEncoding;
};
/**
 * This interface was referenced by `MediaTypeWithExamples`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;


    /**
    * Creates an Oas ??1 object..
    * @return {(OasExample | OasReference)}
    */
    public create??2(name: string): (OasExample | OasReference) {

        let rval: (OasExample | OasReference) = new (OasExample | OasReference)(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an Oas Encoding object..
    * @return {OasEncoding}
    */
    public createEncoding(name: string): OasEncoding {

        let rval: OasEncoding = new OasEncoding(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitMediaTypeWithExamples(<IOasMediaTypeWithExamples>this);
  }
    
}
  
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export interface IOasParameterWithContentNotInPath {
  name: string;
  in: ("query" | "header" | "cookie");
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  content: {
  [k: string]: OasMediaType;
};
/**
 * This interface was referenced by `ParameterWithContentNotInPath`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Describes a single operation parameter.  A unique parameter is defined by a combination of a name and location.
 */
export class OasParameterWithContentNotInPath extends OasExtensibleNode implements IOasParameterWithContentNotInPath {
  name: string;
  in: ("query" | "header" | "cookie");
  description?: string;
  required?: boolean;
  deprecated?: boolean;
  allowEmptyValue?: boolean;
  content: {
  [k: string]: OasMediaType;
};
/**
 * This interface was referenced by `ParameterWithContentNotInPath`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;







    /**
    * Creates an Oas MediaType object..
    * @return {OasMediaType}
    */
    public createMediaType(name: string): OasMediaType {

        let rval: OasMediaType = new OasMediaType(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitParameterWithContentNotInPath(<IOasParameterWithContentNotInPath>this);
  }
    
}
  
/**
 * Describes a single request body.
 */
export interface IOasRequestBody {
  description?: string;
  content: {
  [k: string]: OasMediaType;
};
  required?: boolean;
/**
 * This interface was referenced by `RequestBody`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Describes a single request body.
 */
export class OasRequestBody extends OasExtensibleNode implements IOasRequestBody {
  description?: string;
  content: {
  [k: string]: OasMediaType;
};
  required?: boolean;
/**
 * This interface was referenced by `RequestBody`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;


    /**
    * Creates an Oas MediaType object..
    * @return {OasMediaType}
    */
    public createMediaType(name: string): OasMediaType {

        let rval: OasMediaType = new OasMediaType(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }


/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitRequestBody(<IOasRequestBody>this);
  }
    
}
  
/**
 * A container for the expected responses of an operation. The container maps a HTTP response code to the expected response.  It is not expected for the documentation to necessarily cover all possible HTTP response codes, since they may not be known in advance. However, it is expected for the documentation to cover a successful operation response and any known errors.  The `default` MAY be used as a default response object for all HTTP codes  that are not covered individually by the specification.  The `Responses Object` MUST contain at least one response code, and it  SHOULD be the response for a successful operation call.
 */
export interface IOasResponses {
  default?: (OasResponse | OasReference);
}
/**
 * A container for the expected responses of an operation. The container maps a HTTP response code to the expected response.  It is not expected for the documentation to necessarily cover all possible HTTP response codes, since they may not be known in advance. However, it is expected for the documentation to cover a successful operation response and any known errors.  The `default` MAY be used as a default response object for all HTTP codes  that are not covered individually by the specification.  The `Responses Object` MUST contain at least one response code, and it  SHOULD be the response for a successful operation call.
 */
export class OasResponses extends OasExtensibleNode implements IOasResponses {
  default?: (OasResponse | OasReference);



/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitResponses(<IOasResponses>this);
  }
    
}
  
/**
 * Describes a single response from an API Operation, including design-time, static  `links` to operations based on the response.
 */
export interface IOasResponse {
  description: string;
  headers?: {
  [k: string]: (OasHeader | OasReference);
};
  content?: {
  [k: string]: OasMediaType;
};
  links?: {
  [k: string]: (OasLink | OasReference);
};
/**
 * This interface was referenced by `Response`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Describes a single response from an API Operation, including design-time, static  `links` to operations based on the response.
 */
export class OasResponse extends OasExtensibleNode implements IOasResponse {
  description: string;
  headers?: {
  [k: string]: (OasHeader | OasReference);
};
  content?: {
  [k: string]: OasMediaType;
};
  links?: {
  [k: string]: (OasLink | OasReference);
};
/**
 * This interface was referenced by `Response`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;


    /**
    * Creates an Oas ??1 object..
    * @return {(OasHeader | OasReference)}
    */
    public create??2(name: string): (OasHeader | OasReference) {

        let rval: (OasHeader | OasReference) = new (OasHeader | OasReference)(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an Oas MediaType object..
    * @return {OasMediaType}
    */
    public createMediaType(name: string): OasMediaType {

        let rval: OasMediaType = new OasMediaType(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an Oas ??1 object..
    * @return {(OasLink | OasReference)}
    */
    public create??2(name: string): (OasLink | OasReference) {

        let rval: (OasLink | OasReference) = new (OasLink | OasReference)(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitResponse(<IOasResponse>this);
  }
    
}
  
/**
 * The `Link Object` is responsible for defining a possible operation based on a single response.
 */
export interface IOasLinkWithOperationRef {
  operationRef?: string;
  parameters?: {
  [k: string]: any;
};
  requestBody?: any;
  description?: string;
  server?: OasServer;
/**
 * This interface was referenced by `LinkWithOperationRef`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * The `Link Object` is responsible for defining a possible operation based on a single response.
 */
export class OasLinkWithOperationRef extends OasExtensibleNode implements IOasLinkWithOperationRef {
  operationRef?: string;
  parameters?: {
  [k: string]: any;
};
  requestBody?: any;
  description?: string;
  server?: OasServer;
/**
 * This interface was referenced by `LinkWithOperationRef`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;


    /**
    * Creates an Oas ??1 object..
    * @return {any}
    */
    public create??2(name: string): any {

        let rval: any = new any(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }



    /**
    * Creates an OAS 3.0 server OasServer object..
    * @return {OasServer}
    */
    public createServer(): OasServer {
        let rval: OasServer = new OasServer();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitLinkWithOperationRef(<IOasLinkWithOperationRef>this);
  }
    
}
  
/**
 * The `Link Object` is responsible for defining a possible operation based on a single response.
 */
export interface IOasLinkWithOperationId {
  operationId?: string;
  parameters?: {
  [k: string]: any;
};
  requestBody?: any;
  description?: string;
  server?: OasServer;
/**
 * This interface was referenced by `LinkWithOperationId`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * The `Link Object` is responsible for defining a possible operation based on a single response.
 */
export class OasLinkWithOperationId extends OasExtensibleNode implements IOasLinkWithOperationId {
  operationId?: string;
  parameters?: {
  [k: string]: any;
};
  requestBody?: any;
  description?: string;
  server?: OasServer;
/**
 * This interface was referenced by `LinkWithOperationId`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;


    /**
    * Creates an Oas ??1 object..
    * @return {any}
    */
    public create??2(name: string): any {

        let rval: any = new any(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }



    /**
    * Creates an OAS 3.0 server OasServer object..
    * @return {OasServer}
    */
    public createServer(): OasServer {
        let rval: OasServer = new OasServer();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitLinkWithOperationId(<IOasLinkWithOperationId>this);
  }
    
}
  
/**
 * A map of possible out-of band callbacks related to the parent operation. Each value in the map is a Path Item Object that describes a set of requests that may be initiated by the API provider and the expected responses. The key value used to identify the callback object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation.
 */
export interface IOasCallback {
  [k: string]: OasPathItem;
}
/**
 * A map of possible out-of band callbacks related to the parent operation. Each value in the map is a Path Item Object that describes a set of requests that may be initiated by the API provider and the expected responses. The key value used to identify the callback object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation.
 */
export class OasCallback extends OasExtensibleNode implements IOasCallback {
  [k: string]: OasPathItem;


    /**
    * Creates an OAS 3.0 [k: string] OasPathItem object..
    * @return {OasPathItem}
    */
    public createPathItem(): OasPathItem {
        let rval: OasPathItem = new OasPathItem();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }
/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitCallback(<IOasCallback>this);
  }
    
}
  
/**
 * Holds a set of reusable objects for different aspects of the OAS. All objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object.
 */
export interface IOasComponents {
  schemas?: {
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9\.\-_]+$".
 */
  [k: string]: (OasReference | OasSchema);
};
  responses?: {
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9\.\-_]+$".
 */
  [k: string]: (OasReference | OasResponse);
};
  parameters?: {
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9\.\-_]+$".
 */
  [k: string]: (OasReference | OasParameter);
};
  examples?: {
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9\.\-_]+$".
 */
  [k: string]: (OasReference | OasExample);
};
  requestBodies?: {
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9\.\-_]+$".
 */
  [k: string]: (OasReference | OasRequestBody);
};
  headers?: {
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9\.\-_]+$".
 */
  [k: string]: (OasReference | OasHeader);
};
  securitySchemes?: {
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9\.\-_]+$".
 */
  [k: string]: (OasReference | OasSecurityScheme);
};
  links?: {
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9\.\-_]+$".
 */
  [k: string]: (OasReference | OasLink);
};
  callbacks?: {
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9\.\-_]+$".
 */
  [k: string]: (OasReference | OasCallback);
};
/**
 * This interface was referenced by `Components`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Holds a set of reusable objects for different aspects of the OAS. All objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object.
 */
export class OasComponents extends OasExtensibleNode implements IOasComponents {
  schemas?: {
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9\.\-_]+$".
 */
  [k: string]: (OasReference | OasSchema);
};
  responses?: {
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9\.\-_]+$".
 */
  [k: string]: (OasReference | OasResponse);
};
  parameters?: {
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9\.\-_]+$".
 */
  [k: string]: (OasReference | OasParameter);
};
  examples?: {
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9\.\-_]+$".
 */
  [k: string]: (OasReference | OasExample);
};
  requestBodies?: {
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9\.\-_]+$".
 */
  [k: string]: (OasReference | OasRequestBody);
};
  headers?: {
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9\.\-_]+$".
 */
  [k: string]: (OasReference | OasHeader);
};
  securitySchemes?: {
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9\.\-_]+$".
 */
  [k: string]: (OasReference | OasSecurityScheme);
};
  links?: {
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9\.\-_]+$".
 */
  [k: string]: (OasReference | OasLink);
};
  callbacks?: {
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9\.\-_]+$".
 */
  [k: string]: (OasReference | OasCallback);
};
/**
 * This interface was referenced by `Components`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;

    /**
    * Creates an Oas ??1 object..
    * @return {(OasReference | OasSchema)}
    */
    public create??2(name: string): (OasReference | OasSchema) {

        let rval: (OasReference | OasSchema) = new (OasReference | OasSchema)(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an Oas ??1 object..
    * @return {(OasReference | OasResponse)}
    */
    public create??2(name: string): (OasReference | OasResponse) {

        let rval: (OasReference | OasResponse) = new (OasReference | OasResponse)(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an Oas ??1 object..
    * @return {(OasReference | OasParameter)}
    */
    public create??2(name: string): (OasReference | OasParameter) {

        let rval: (OasReference | OasParameter) = new (OasReference | OasParameter)(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an Oas ??1 object..
    * @return {(OasReference | OasExample)}
    */
    public create??2(name: string): (OasReference | OasExample) {

        let rval: (OasReference | OasExample) = new (OasReference | OasExample)(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an Oas ??1 object..
    * @return {(OasReference | OasRequestBody)}
    */
    public create??2(name: string): (OasReference | OasRequestBody) {

        let rval: (OasReference | OasRequestBody) = new (OasReference | OasRequestBody)(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an Oas ??1 object..
    * @return {(OasReference | OasHeader)}
    */
    public create??2(name: string): (OasReference | OasHeader) {

        let rval: (OasReference | OasHeader) = new (OasReference | OasHeader)(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an Oas ??1 object..
    * @return {(OasReference | OasSecurityScheme)}
    */
    public create??2(name: string): (OasReference | OasSecurityScheme) {

        let rval: (OasReference | OasSecurityScheme) = new (OasReference | OasSecurityScheme)(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an Oas ??1 object..
    * @return {(OasReference | OasLink)}
    */
    public create??2(name: string): (OasReference | OasLink) {

        let rval: (OasReference | OasLink) = new (OasReference | OasLink)(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an Oas ??1 object..
    * @return {(OasReference | OasCallback)}
    */
    public create??2(name: string): (OasReference | OasCallback) {

        let rval: (OasReference | OasCallback) = new (OasReference | OasCallback)(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitComponents(<IOasComponents>this);
  }
    
}
  
export interface IOasApiKeySecurityScheme {
  type: "apiKey";
  name: string;
  in: ("header" | "query" | "cookie");
  description?: string;
/**
 * This interface was referenced by `ApiKeySecurityScheme`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
export class OasApiKeySecurityScheme extends OasExtensibleNode implements IOasApiKeySecurityScheme {
  type: "apiKey";
  name: string;
  in: ("header" | "query" | "cookie");
  description?: string;
/**
 * This interface was referenced by `ApiKeySecurityScheme`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;





/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitApiKeySecurityScheme(<IOasApiKeySecurityScheme>this);
  }
    
}
  
export interface IOasNonBearerHttpSecurityScheme {
  scheme: string;
  description?: string;
  type: "http";
/**
 * This interface was referenced by `NonBearerHttpSecurityScheme`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
export class OasNonBearerHttpSecurityScheme extends OasExtensibleNode implements IOasNonBearerHttpSecurityScheme {
  scheme: string;
  description?: string;
  type: "http";
/**
 * This interface was referenced by `NonBearerHttpSecurityScheme`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;




/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitNonBearerHttpSecurityScheme(<IOasNonBearerHttpSecurityScheme>this);
  }
    
}
  
export interface IOasBearerHttpSecurityScheme {
  scheme: "bearer";
  bearerFormat?: string;
  type: "http";
  description?: string;
/**
 * This interface was referenced by `BearerHttpSecurityScheme`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
export class OasBearerHttpSecurityScheme extends OasExtensibleNode implements IOasBearerHttpSecurityScheme {
  scheme: "bearer";
  bearerFormat?: string;
  type: "http";
  description?: string;
/**
 * This interface was referenced by `BearerHttpSecurityScheme`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;





/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitBearerHttpSecurityScheme(<IOasBearerHttpSecurityScheme>this);
  }
    
}
  
export interface IOasOAuth2SecurityScheme {
  type: "oauth2";
  flows: OasOAuthFlows;
  description?: string;
/**
 * This interface was referenced by `OAuth2SecurityScheme`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
export class OasOAuth2SecurityScheme extends OasExtensibleNode implements IOasOAuth2SecurityScheme {
  type: "oauth2";
  flows: OasOAuthFlows;
  description?: string;
/**
 * This interface was referenced by `OAuth2SecurityScheme`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;


    /**
    * Creates an OAS 3.0 flows OasOAuthFlows object..
    * @return {OasOAuthFlows}
    */
    public createOAuthFlows(): OasOAuthFlows {
        let rval: OasOAuthFlows = new OasOAuthFlows();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }


/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitOAuth2SecurityScheme(<IOasOAuth2SecurityScheme>this);
  }
    
}
  
/**
 * Allows configuration of the supported OAuth Flows.
 */
export interface IOasOAuthFlows {
  implicit?: OasImplicitOAuthFlow;
  password?: OasPasswordOAuthFlow;
  clientCredentials?: OasClientCredentialsFlow;
  authorizationCode?: OasAuthorizationCodeOAuthFlow;
/**
 * This interface was referenced by `OAuthFlows`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
/**
 * Allows configuration of the supported OAuth Flows.
 */
export class OasOAuthFlows extends OasExtensibleNode implements IOasOAuthFlows {
  implicit?: OasImplicitOAuthFlow;
  password?: OasPasswordOAuthFlow;
  clientCredentials?: OasClientCredentialsFlow;
  authorizationCode?: OasAuthorizationCodeOAuthFlow;
/**
 * This interface was referenced by `OAuthFlows`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;

    /**
    * Creates an OAS 3.0 implicit OasImplicitOAuthFlow object..
    * @return {OasImplicitOAuthFlow}
    */
    public createImplicitOAuthFlow(): OasImplicitOAuthFlow {
        let rval: OasImplicitOAuthFlow = new OasImplicitOAuthFlow();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 password OasPasswordOAuthFlow object..
    * @return {OasPasswordOAuthFlow}
    */
    public createPasswordOAuthFlow(): OasPasswordOAuthFlow {
        let rval: OasPasswordOAuthFlow = new OasPasswordOAuthFlow();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 clientCredentials OasClientCredentialsFlow object..
    * @return {OasClientCredentialsFlow}
    */
    public createClientCredentialsFlow(): OasClientCredentialsFlow {
        let rval: OasClientCredentialsFlow = new OasClientCredentialsFlow();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

    /**
    * Creates an OAS 3.0 authorizationCode OasAuthorizationCodeOAuthFlow object..
    * @return {OasAuthorizationCodeOAuthFlow}
    */
    public createAuthorizationCodeOAuthFlow(): OasAuthorizationCodeOAuthFlow {
        let rval: OasAuthorizationCodeOAuthFlow = new OasAuthorizationCodeOAuthFlow();
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitOAuthFlows(<IOasOAuthFlows>this);
  }
    
}
  
export interface IOasImplicitOAuthFlow {
  authorizationUrl: string;
  refreshUrl?: string;
  scopes: {
  [k: string]: string;
};
/**
 * This interface was referenced by `ImplicitOAuthFlow`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
export class OasImplicitOAuthFlow extends OasExtensibleNode implements IOasImplicitOAuthFlow {
  authorizationUrl: string;
  refreshUrl?: string;
  scopes: {
  [k: string]: string;
};
/**
 * This interface was referenced by `ImplicitOAuthFlow`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;



    /**
    * Creates an Oas ??1 object..
    * @return {string}
    */
    public create??2(name: string): string {

        let rval: string = new string(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitImplicitOAuthFlow(<IOasImplicitOAuthFlow>this);
  }
    
}
  
export interface IOasPasswordOAuthFlow {
  tokenUrl: string;
  refreshUrl?: string;
  scopes?: {
  [k: string]: string;
};
/**
 * This interface was referenced by `PasswordOAuthFlow`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
export class OasPasswordOAuthFlow extends OasExtensibleNode implements IOasPasswordOAuthFlow {
  tokenUrl: string;
  refreshUrl?: string;
  scopes?: {
  [k: string]: string;
};
/**
 * This interface was referenced by `PasswordOAuthFlow`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;



    /**
    * Creates an Oas ??1 object..
    * @return {string}
    */
    public create??2(name: string): string {

        let rval: string = new string(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitPasswordOAuthFlow(<IOasPasswordOAuthFlow>this);
  }
    
}
  
export interface IOasClientCredentialsFlow {
  tokenUrl: string;
  refreshUrl?: string;
  scopes?: {
  [k: string]: string;
};
/**
 * This interface was referenced by `ClientCredentialsFlow`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
export class OasClientCredentialsFlow extends OasExtensibleNode implements IOasClientCredentialsFlow {
  tokenUrl: string;
  refreshUrl?: string;
  scopes?: {
  [k: string]: string;
};
/**
 * This interface was referenced by `ClientCredentialsFlow`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;



    /**
    * Creates an Oas ??1 object..
    * @return {string}
    */
    public create??2(name: string): string {

        let rval: string = new string(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitClientCredentialsFlow(<IOasClientCredentialsFlow>this);
  }
    
}
  
export interface IOasAuthorizationCodeOAuthFlow {
  authorizationUrl: string;
  tokenUrl: string;
  refreshUrl?: string;
  scopes?: {
  [k: string]: string;
};
/**
 * This interface was referenced by `AuthorizationCodeOAuthFlow`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
export class OasAuthorizationCodeOAuthFlow extends OasExtensibleNode implements IOasAuthorizationCodeOAuthFlow {
  authorizationUrl: string;
  tokenUrl: string;
  refreshUrl?: string;
  scopes?: {
  [k: string]: string;
};
/**
 * This interface was referenced by `AuthorizationCodeOAuthFlow`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;




    /**
    * Creates an Oas ??1 object..
    * @return {string}
    */
    public create??2(name: string): string {

        let rval: string = new string(name);
        rval._ownerDocument = this._ownerDocument;
        rval._parent = this;
        return rval;
    }

/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitAuthorizationCodeOAuthFlow(<IOasAuthorizationCodeOAuthFlow>this);
  }
    
}
  
export interface IOasOpenIdConnectSecurityScheme {
  type: "openIdConnect";
  openIdConnectUrl: string;
  description?: string;
/**
 * This interface was referenced by `OpenIdConnectSecurityScheme`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;
}
export class OasOpenIdConnectSecurityScheme extends OasExtensibleNode implements IOasOpenIdConnectSecurityScheme {
  type: "openIdConnect";
  openIdConnectUrl: string;
  description?: string;
/**
 * This interface was referenced by `OpenIdConnectSecurityScheme`'s JSON-Schema definition
 * via the `patternProperty` "^x-".
 */
  [k: string]: any;




/**
   * Accepts the given OAS node visitor and calls the appropriate method on it to visit this node.
   * @param visitor
   */
  public accept(visitor: IOasNodeVisitor): void {
    visitor.visitOpenIdConnectSecurityScheme(<IOasOpenIdConnectSecurityScheme>this);
  }
    
}
  
